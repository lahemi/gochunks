Ð Not everything here is implemented, and things _will_ change.
Ð Ð comment
Ð _ negation, _3
Ð +, -, ×, ÷, %
Ð | abs, 4 |
Ð « », << >>
Ð
Ð , prints the top-most elem of the global stack
Ð ß prints the whole stack. neither modifies the stack

2 3 4 5     Ð to global fstack

2 2 +
5 3 ÷
_4 |
Ð etc, basic operators take two or one args, either
Ð by popping them from global stack, specifically
Ð popped from a named stack, or "cloning"
Ð from a referenced named stack.

1 2 3 :x    Ð fstack to x label in env

'x          Ð ref, without modifying x

2 2 :y      Ð binding also clears the "global" area

'y +        Ð 2 + 2 to global stack

'x /+       Ð 1 + 2 + 3 global stack

'x /+ :z    Ð 1+2+3 to z

Ð operator alone either pops one or two
Ð floats from the stack, does its operation
Ð and pushes the result to the global stack

Ð ı takes one arg, and which is used as the limit
Ð returning a stack from 1 to the limit
Ð / reduce
Ð º apply

6 ı/×   Ð factorial of 6

'x 5 º+   Ð 1+5 2+5 3+5

Ð concat stacks
'y 'x 'z :q     Ð 2 2 6 7 8 6 to q

'x ! :x  Ð pop one elem from x
'x 2 :x  Ð pushes 2 to x

5ı :arr         Ð 1 2 3 4 5 to arr
'arr ß ! :arr   Ð arr to "global" area, print it all, pop one elem, and rebind
'arr ß          Ð show the result of the pop

Ð functions
Ð (body=name) 'name

(ß=show) (º!=empty) (ı/×=fact)

1 2 3 'show 'empty
6 'fact 'show

(1 2 3=nums)

'nums 'show     Ð prints 1 2 3


Ð basic stack manipulation as in FORTH:
Ð       DUP, SWAP, OVER, ROT, PICK, (we have DROP already)
Ð
Ð reverse
Ð
Ð more maths: 
Ð       ceil & floor
Ð       and, or, not
Ð       < > =
Ð       power, root (square ², cubic ³)
Ð       random
Ð       constants: PI, ...
Ð
Ð conditionals ?
Ð
Ð 1 2 + -> a1:=1 a2:=2; should change to other way around
Ð so that it'd  be more strictly in order, resembling a stack ?
Ð
Ð a special hidden stack, where you can store things temporarily ?
Ð ie. 1 2 3 4 :x 'x [hide] ! [unhide] :x -> 1 2 4
Ð
